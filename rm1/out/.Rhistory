# Set working diretory
setwd("C:/Users/macruz/workspace-doctorate/RM/research-methods1/rm1/out")
# Loading dataset
data10 <- read.csv(
file = "data10000.csv",
header = TRUE,
sep = ";",
dec = ".",
stringsAsFactor = TRUE,
quote = "\""
)
# with error data
summary(data10)
var(data10$max)
var(data10$count_err)
M <- cor(data10$max,data10$count_err)
round(M, 2)
# DATASET EPS=0.0001
data00001 <- subset(data10, eps == 0.0001, select = c("id", "algo","max","count_err"))
summary(data00001)
pdf('plotEPS00001x10.pdf')
plot(data00001$count_err,data00001$max, col = data00001$id, main = "EPS=0.0001 and LEN=10000", xlab = "Quant. Errors", ylab = "Max Subarray Sorted")
text(data00001$count_err,data00001$max, labels = data00001$id, cex= 0.7, pos = 4)
dev.off()
# DATASET EPS=0.001
data0001 <- subset(data10, eps == 0.001, select = c("id", "algo","max","count_err"))
summary(data0001)
pdf('plotEPS0001x10mil.pdf')
plot(data0001$count_err,data0001$max, col = data0001$id, main = "EPS=0.001 and LEN=10000", xlab = "Quant. Errors", ylab = "Max Subarray Sorted")
text(data0001$count_err,data0001$max, labels = data0001$id, cex= 0.7, pos = 4)
dev.off()
# DATASET EPS=0.01
data001 <- subset(data10, eps == 0.01, select = c("id", "algo","max","count_err"))
summary(data001)
pdf('plotEPS001x10mil.pdf')
plot(data001$count_err,data001$max, col = data001$id, main = "EPS=0.01 and LEN=10000", xlab = "Quant. Errors", ylab = "Max Subarray Sorted")
text(data001$count_err,data001$max, labels = data001$id, cex= 0.7, pos = 4)
dev.off()
M <- cor(data00001$max,data00001$count_err)
round(M, 2)
M <- cor(data0001$max,data0001$count_err)
round(M, 2)
M <- cor(data001$max,data001$count_err)
round(M, 2)
# DATASET EPS=0.01 AND 1000
data001x1000 <- subset(data, eps == 0.01 & tam == 1000, select = c("id", "algo","max","count_err"))
# Set working diretory
setwd("C:/Users/macruz/workspace-doctorate/RM/research-methods1/rm1/out")
# Loading dataset
dataAll <- read.csv(
file = "data.csv",
header = TRUE,
sep = ";",
dec = ".",
stringsAsFactor = TRUE,
quote = "\""
)
# without error data
dataClean <- subset(dataAll, recursive == "FALSE", select = c("id","algo", "eps", "tam","max","count_err"))
data <- dataClean
# DATASET EPS=0.01 AND 1000
data001x1000 <- subset(data, eps == 0.01 & tam == 1000, select = c("id", "algo","max","count_err"))
summary(data001x1000)
M <- cor(data001x1000$max,data001x1000$count_err)
round(M, 2)
# DATASET EPS=0.01 AND 100
data001x100 <- subset(data, eps == 0.01 & tam == 100, select = c("id", "algo","max","count_err"))
summary(data001x100)
var(data001x100$max)
var(data001x100$count_err)
M <- cor(data001x100$max,data001x100$count_err)
round(M, 2)
install.packages("ggcorrplot")
library(ggcorrplot)
pdf('plotEPS001x100.pdf')
pdf('plotEPS001x100L.pdf')
plot(data001x100$count_err,data001x100$max, col = data001x100$id, main = "EPS=0.01 and LEN=100", xlab = "Quant. Errors", ylab = "Max Subarray Sorted")
abline(lm(data001x100$count_err,data001x100$max))
abline(lm(data001x100$count_err ~ data001x100$max))
text(data001x100$count_err,data001x100$max, labels = data001x100$id, cex= 0.7, pos = 4)
dev.off()
pdf('plotEPS001x10mil.pdf')
plot(data001$count_err,data001$max, col = data001$id, main = "EPS=0.01 and LEN=10000", xlab = "Quant. Errors", ylab = "Max Subarray Sorted")
abline(lm(data001x100$count_err ~ data001x100$max))
text(data001$count_err,data001$max, labels = data001$id, cex= 0.7, pos = 4)
dev.off()
library(ggplot2)
ggplot(data = data001, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplot(data = data001, aes(x=max, y=count_err, fill=value)) +
geom_tile()
library(ggcorrplot)
data(data001)
# Set working diretory
setwd("C:/Users/macruz/workspace-doctorate/RM/research-methods1/rm1/out")
# Loading dataset
data10 <- read.csv(
file = "data10000.csv",
header = TRUE,
sep = ";",
dec = ".",
stringsAsFactor = TRUE,
quote = "\""
)
# with error data
summary(data10)
var(data10$max)
var(data10$count_err)
M <- cor(data10$max,data10$count_err)
round(M, 2)
# DATASET EPS=0.0001
data00001 <- subset(data10, eps == 0.0001, select = c("id", "algo","max","count_err"))
summary(data00001)
M <- cor(data00001$max,data00001$count_err)
round(M, 2)
pdf('plotEPS00001x10mil.pdf')
plot(data00001$count_err,data00001$max, col = data00001$id, main = "EPS=0.0001 and LEN=10000", xlab = "Quant. Errors", ylab = "Max Subarray Sorted")
text(data00001$count_err,data00001$max, labels = data00001$id, cex= 0.7, pos = 4)
dev.off()
# DATASET EPS=0.001
data0001 <- subset(data10, eps == 0.001, select = c("id", "algo","max","count_err"))
summary(data0001)
M <- cor(data0001$max,data0001$count_err)
round(M, 2)
pdf('plotEPS0001x10mil.pdf')
plot(data0001$count_err,data0001$max, col = data0001$id, main = "EPS=0.001 and LEN=10000", xlab = "Quant. Errors", ylab = "Max Subarray Sorted")
text(data0001$count_err,data0001$max, labels = data0001$id, cex= 0.7, pos = 4)
dev.off()
# DATASET EPS=0.01
data001 <- subset(data10, eps == 0.01, select = c("id", "algo","max","count_err"))
summary(data001)
M <- cor(data001$max,data001$count_err)
round(M, 2)
pdf('plotEPS001x10mil.pdf')
plot(data001$count_err,data001$max, col = data001$id, main = "EPS=0.01 and LEN=10000", xlab = "Quant. Errors", ylab = "Max Subarray Sorted")
#abline(lm(data001x100$count_err ~ data001x100$max))
text(data001$count_err,data001$max, labels = data001$id, cex= 0.7, pos = 4)
pdf('plotEPS001x10mil.pdf')
plot(data001$count_err,data001$max, col = data001$id, main = "EPS=0.01 and LEN=10000", xlab = "Quant. Errors", ylab = "Max Subarray Sorted")
#abline(lm(data001x100$count_err ~ data001x100$max))
text(data001$count_err,data001$max, labels = data001$id, cex= 0.7, pos = 4)
dev.off()
library(ggcorrplot)
data(data001)
#data(data001)
corr <- round(cor(data001), 1)
dataCorr <- data10[,c(3,4,5,6)]
summary(dataCorr)
#data(data001)
corr <- round(cor(dataCorr), 1)
head(dataCorr)
#data(data001)
corr <- round(cor(dataCorr), 1)
dataCorr <- data10[,c(3,5,6)]
summary(dataCorr)
#data(data001)
corr <- round(cor(dataCorr), 1)
head(corr)
# Loading dataset
dataAll <- read.csv(
file = "data.csv",
header = TRUE,
sep = ";",
dec = ".",
stringsAsFactor = TRUE,
quote = "\""
)
dataCorr2 <- dataAll[,c(3,4,5,6,7)]
summary(dataCorr2)
#data(data001)
corr <- round(cor(dataCorr2), 1)
head(corr)
ggcorrplot(corr, hc.order = TRUE, type = "lower",
outline.col = "white")
# ANOVA
library(dplyr)
group_by(data10, algo) %>%
summarise(
count = n(),
mean = mean(max, na.rm = TRUE),
sd = sd(max, na.rm = TRUE)
)
install.packages("ggpubr")
library(ggpubr)
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
library(ggpubr)
library(ggplot2)
library(ggpubr)
ggboxplot(data10, x = "algo", y = "max",
color = "algo", palette = c("#00DDDD", "#00AFBB", "#E7B800", "#FC4E07"),
order = c("bubble", "merge", "quick", "insertion"),
ylab = "Length Array", xlab = "Algoritm")
ggboxplot(data10, x = "algo", y = "count_err",
color = "algo", palette = c("#00DDDD", "#00AFBB", "#E7B800", "#FC4E07"),
order = c("bubble", "merge", "quick", "insertion"),
ylab = "Quant. Errors", xlab = "Algoritm")
# Mean plots
# ++++++++++++++++++++
# Plot weight by group
# Add error bars: mean_se
# (other values include: mean_sd, mean_ci, median_iqr, ....)
library("ggpubr")
ggboxplot(data10, x = "algo", y = "max",
color = "algo", palette = c("#00DDDD", "#00AFBB", "#E7B800", "#FC4E07"),
order = c("bubble", "merge", "quick", "insertion"),
ylab = "Length Array", xlab = "Algorithm")
ggboxplot(data10, x = "algo", y = "count_err",
color = "algo", palette = c("#00DDDD", "#00AFBB", "#E7B800", "#FC4E07"),
order = c("bubble", "merge", "quick", "insertion"),
ylab = "Quant. Errors", xlab = "Algorithm")
ggboxplot(data10, x = "algo", y = "max",
color = "algo", palette = c("#00DDDD", "#00AFBB", "#E7B800", "#FC4E07"),
order = c("bubble", "merge", "quick", "insertion"),
ylab = "Length Array", xlab = "Algorithm")
ggboxplot(data10, x = "algo", y = "count_err",
color = "algo", palette = c("#00DDDD", "#00AFBB", "#E7B800", "#FC4E07"),
order = c("bubble", "merge", "quick", "insertion"),
ylab = "Quant. Errors", xlab = "Algorithm")
ggline(my_data, x = "algo", y = "max",
add = c("mean_se", "jitter"),
order = c("bubble", "merge", "quick", "insertion"),
ylab = "Weight", xlab = "Algoritm")
ggline(data10, x = "algo", y = "max",
add = c("mean_se", "jitter"),
order = c("bubble", "merge", "quick", "insertion"),
ylab = "Weight", xlab = "Algoritm")
ggline(data10, x = "algo", y = "max",
add = c("mean_se", "jitter"),
order = c("bubble", "merge", "quick", "insertion"),
ylab = "Length Array", xlab = "Algoritm")
# Mean plots
# ++++++++++++++++++++
# Plot weight by group
# Add error bars: mean_se
# (other values include: mean_sd, mean_ci, median_iqr, ....)
library("ggpubr")
ggline(data10, x = "algo", y = "max",
add = c("mean_se", "jitter"),
order = c("bubble", "merge", "quick", "insertion"),
ylab = "Length Array", xlab = "Algoritm")
# Compute the analysis of variance
res.aov <- aov(max ~ algo, data = data10)
# Summary of the analysis
summary(res.aov)
# Compute the analysis of variance
res.aov <- aov(count_err ~ algo, data = data10)
# Compute the analysis of variance
res.aov <- aov(count_err ~ algo, data = data10)
# Summary of the analysis
summary(res.aov)
TukeyHSD(res.aov)
# DATASET EPS=0.01
data001 <- subset(data10, eps == 0.01, select = c("id", "algo","max","count_err"))
# Compute the analysis of variance
res.aov <- aov(max ~ algo, data = data001)
# Summary of the analysis
summary(res.aov)
# Compute the analysis of variance
res.aov <- aov(count_err ~ algo, data = data001)
# Summary of the analysis
summary(res.aov)
TukeyHSD(res.aov)
# Compute the analysis of variance
res.aov <- aov(max ~ algo, data = data001)
# Summary of the analysis
summary(res.aov)
# Compute the analysis of variance
res.aov <- aov(count_err ~ algo, data = data001)
# Summary of the analysis
summary(res.aov)
TukeyHSD(res.aov)
# Compute the analysis of variance
res.aov <- aov(max ~ algo, data = data001)
# Summary of the analysis
summary(res.aov)
TukeyHSD(res.aov)
#TWO-WAY ANOVA
library(dplyr)
#TWO-WAY ANOVA
library(dplyr)
library("ggpubr")
ggboxplot(data001, x = "count_err", y = "max", color = "algo",
palette = c("#00AFBB", "#E7B800"))
pdf("test.pdf")
ggboxplot(data001, x = "count_err", y = "max", color = "algo",
palette = c("#00AFBB", "#E7B800"))
ggboxplot(data001, x = "count_err", y = "max", color = "algo",
palette = c("#00AFBB", "#E7B800", "#E7AF00", "#00B8BB"))
dev.off()
pdf("test.pdf")
ggboxplot(data10, x = "eps", y = "max", color = "algo",
palette = c("#00AFBB", "#E7B800", "#E7AF00", "#00B8BB"))
dev.off()
pdf("test.pdf")
ggboxplot(data10, x = "eps", y = "max", color = "algo",
palette = c("#0055BB", "#E75500", "#E7AF00", "#00B8BB"))
dev.off()
pdf("test.pdf")
ggboxplot(data10, x = "eps", y = "count_err", color = "algo",
palette = c("#0055BB", "#E75500", "#E7AF00", "#00B8BB"))
dev.off()
#library("ggpubr")
ggline(my_data, x = "eps", y = "count_err", color = "algo",
add = c("mean_se", "dotplot"),
palette = c("#0055BB", "#E75500", "#E7AF00", "#00B8BB"))
#library("ggpubr")
ggline(data10, x = "eps", y = "count_err", color = "algo",
add = c("mean_se", "dotplot"),
palette = c("#0055BB", "#E75500", "#E7AF00", "#00B8BB"))
#library("ggpubr")
ggline(data10, x = "eps", y = "count_err", color = "algo",
add = c("mean_se"),
palette = c("#0055BB", "#E75500", "#E7AF00", "#00B8BB"))
#library("ggpubr")
pdf("test.pdf")
ggline(data10, x = "eps", y = "count_err", color = "algo",
add = c("mean_se"),
palette = c("#0055BB", "#E75500", "#E7AF00", "#00B8BB"))
dev.off()
#library("ggpubr")
pdf("test.pdf")
ggline(data10, x = "eps", y = "max", color = "algo",
add = c("mean_se"),
palette = c("#0055BB", "#E75500", "#E7AF00", "#00B8BB"))
dev.off()
#library("ggpubr")
pdf("test.pdf")
ggline(data10, x = "eps", y = "max", color = "algo",
add = c("mean_se"),
palette = c("#0055BB", "#E75500", "#E7AF00", "#00B8BB"))
dev.off()
pdf("test.pdf")
ggline(data10, x = "eps", y = "count_err", color = "algo",
add = c("mean_se"),
palette = c("#0055BB", "#E75500", "#E7AF00", "#00B8BB"))
dev.off()
pdf("test.pdf")
ggline(data10, x = "eps", y = "count_err", color = "algo",
add = c("mean_se"),
palette = c("#0055BB", "#E75500", "#E7AF00", "#00B8BB"),
xlab = "EPS", ylab = "Quant. Errors")
dev.off()
