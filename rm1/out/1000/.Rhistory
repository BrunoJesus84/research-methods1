install.packages("moments")
# Set working diretory
setwd("C:/Users/macruz/workspace-doctorate/RM/research-methods1/rm1/out/1000")
# Loading dataset
farmer <- read.table(
file = "1000data.csv",
header = TRUE,
sep = ";",
quote = "\""
)
# Peek at data
head(farmer)
# Look at column names
names(farmer)
# Rename variables (i.e column 1)
names(farmer)[1] <- "algoritmo"
# Rename variables (i.e column 1)
names(farmer)[1] <- "algorithm"
# Rename variables (i.e column 4)
names(farmer)[4] <- "max_sort"
# Rename variables (i.e column 4)
names(farmer)[4] <- "max_sorted"
# Peek at data
head(farmer)
summary(farmer$count_err)
install.packages("moments")
# Set working diretory
setwd("C:/Users/macruz/workspace-doctorate/RM/research-methods1/rm1/out/1000")
# Loading dataset
dataset <- read.table(
file = "1000data.csv",
header = TRUE,
sep = ";",
quote = "\""
)
# Peek at data
head(dataset)
# Look at column names
names(dataset)
# Rename variables (i.e column 1)
names(dataset)[1] <- "algorithm"
# Rename variables (i.e column 4)
names(dataset)[4] <- "max_sorted"
# Summary of Amount of Classification Errors
summary(dataset$count_err)
# Summary of Amount of Classification Errors
summary(dataset$max_sorted)
plot(density(dataset$max_sorted))
# Graph of the density function of the Amount of Classification Errors
summary(dataset$count_err)
# Graph of the density function of the Amount of Classification Errors
plot(density(dataset$count_err))
# SAMPLES QUANTITAVIVE
table(dataset$algorithm)
# ALGORITHM X max_sorted
table(dataset$algorithm, dataset$max_sorted)
# ALGORITHM X max_sorted
table(dataset$algorithm, dataset$count_err)
# SAMPLES QUANTITAVIVE BY ALGORITHM
plot(table(dataset$algorithm))
# ALGORITHM X max_sorted
plot(table(dataset$algorithm, dataset$count_err))
# ALGORITHM X max_sorted
plot(table(dataset$count_err, dataset$algorithm))
# ALGORITHM X max_sorted
plot.xy(table(dataset$count_err, dataset$algorithm))
# ALGORITHM X max_sorted
table(dataset$count_err, dataset$algorithm)
# ALGORITHM X max_sorted
plot(table(dataset$count_err, dataset$algorithm), type = "l")
# ALGORITHM X count_err
plot(dataset$count_err, dataset$algorithm, type = "l")
# ALGORITHM X count_err
plot(dataset$count_err, dataset$max_sorted, type = "l")
# ALGORITHM X count_err
plot(dataset$count_err, dataset$max_sorted, type = "o")
# ALGORITHM X count_err
plot(dataset$count_err, dataset$max_sorted, type = "p")
# Peek at data
head(dataset)
# ALGORITHM X count_err
plot(dataset$tam, dataset$max_sorted, type = "p")
# ALGORITHM X count_err
plot(dataset$max_sorted, dataset$tam, type = "p")
# max_sorted X tam
plot(dataset$max_sorted, dataset$tam, type = "p")
cov(dataset$max_sorted, dataset$count_err)
cor(dataset$max_sorted, dataset$count_err)
x <- dataset$count_err
y <- dataset$max_sorted
cor(x, y)
# x = count_err
mean(x)	# Mean of the numbers in vector x.
median(x)	# Median of the numbers in vector x
var(x)	# Estimated variance of the population from which the numbers in vector x are sampled
sd(x)	# Estimated standard deviation of the population from which the numbers in vector x are sampled
scale(x)	# Standard scores (z-scores) for the numbers in vector x
# y = max_sorted
mean(y)	# Mean of the numbers in vector x.
median(y)	# Median of the numbers in vector x
var(y)	# Estimated variance of the population from which the numbers in vector x are sampled
y <- dataset$max_sorted
var(y)	# Estimated variance of the population from which the numbers in vector x are sampled
var(x)	# Estimated variance of the population from which the numbers in vector x are sampled
cor(x, y)
M <- cor(x, y)
corrplot(M, method="circle")
install.packages("corrplot")
corrplot(M, method="circle")
plot(M)
library(corrplot)
corrplot(M, method="circle")
M <- as.matrix(cor(x, y))
corrplot(M, method="circle")
M <- as.matrix(cor(x, y))
corrplot(M, method="circle")
head(dataset)
head(x = dataset$algorithm, dataset)
head(dataset)
M <- cor(dataset)
data <- table(dataset, exclude = 1)
head(data)
data <- table(dataset, 2:5)
data <- table(dataset$eps,dataset$tam,dataset$max_sorted,dataset$count_err)
head(data)
M <- cor(dataset)
M <- cor(dataset$eps,dataset$tam,dataset$max_sorted,dataset$count_err)
M <- cor(c(dataset$eps,dataset$tam,dataset$max_sorted,dataset$count_err))
M <- cor(as.matrix(dataset$eps,dataset$tam,dataset$max_sorted,dataset$count_err))
corrplot(M, method="circle")
data <- as.matrix(dataset$eps,dataset$tam,dataset$max_sorted,dataset$count_err)
head(data)
dataset
# Loading dataset
data <- read.csv(
file = "1000data.csv",
header = TRUE,
sep = ";",
quote = "\""
)
data
summary(data)
# Loading dataset
data <- read.csv(
file = "1000data.csv",
header = TRUE,
sep = ";",
dec = "."
)
summary(data)
# Loading dataset
data <- read.csv(
file = "1000data.csv",
header = TRUE,
sep = ";",
dec = ".",
stringsAsFactor = TRUE,
quote = ""
)
summary(data)
head(data)
M <- cor(data)
M <- cor(factor(data))
# Loading dataset
data <- read.csv(
file = "1000data.csv",
header = TRUE,
sep = ";",
dec = ".",
stringsAsFactor = TRUE,
quote = "\""
)
summary(data)
head(data)
M <- cor(data)
is.factor(data$algo)
data <- as.table(dataset$eps,dataset$tam,dataset$max_sorted,dataset$count_err)
head(data)
data <- table(dataset$eps,dataset$tam,dataset$max_sorted,dataset$count_err)
head(data)
# Loading dataset
data <- read.csv(
file = "1000data.csv",
header = TRUE,
sep = ";",
dec = ".",
stringsAsFactor = TRUE,
quote = "\""
)
data <- data[,c(2,3,4,5))
head(data)
is.factor(data$algo)
M <- cor(data)
corrplot(M, method="circle")
data <- data[,c(2,3,4,5))
head(data)
is.factor(data$algo)
M <- cor(data)
corrplot(M, method="circle")
data <- data[,c(2,3,4,5)]
head(data)
M <- cor(data)
M <- cor(data$max,data$count_err)
corrplot(M, method="circle")
cor(data$max,data$count_err)
M <- cor(data$max,data$count_err)
round(M, 2)
M <- cor(my_data, use = "complete.obs")
M <- cor(data, use = "complete.obs")
install.packages("Hmisc")
res2 <- rcorr(as.matrix(data))
library(Hmisc)
res2 <- rcorr(as.matrix(data))
corrplot(res2, method="circle")
res2 <- cor(as.matrix(data))
res2 <- rcorr(as.matrix(data))
head(data)
res2
corrplot(res2, method="circle")
corrplot(as.matrix(data), method="circle")
res2 <- corr(as.matrix(data))
res2 <- cor(as.matrix(data))
res2 <- cor(data)
res2 <- rcorr(as.matrix(data), type = c("pearson","spearman"))
res2
corrplot(res2, method="circle")
corrplot(as.matrix(res2), method="circle")
corrplot(s.matrix(data), method="circle")
corrplot(as.matrix(data), method="circle")
